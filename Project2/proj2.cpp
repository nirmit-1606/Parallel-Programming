#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <omp.h>
#include <iostream>
#include <fstream>
#include <cmath>

int NowYear;  // 2023 - 2028
int NowMonth; // 0 - 11

float NowPrecip;   // inches of rain per month
float NowTemp;     // temperature this month (in F)
float NowHeight;   // rye grass height in inches
int NowNumRabbits; // number of rabbits in the current population
float NowFertilizer; // fertilizer generated by rabbit poop (in lb)

const float RYEGRASS_GROWS_PER_MONTH = 25.0;
const float ONE_RABBITS_EATS_PER_MONTH = 1.5;
const float ONE_RABBIT_POOPS_PER_MONTH = 8.0;

const float AVG_PRECIP_PER_MONTH = 12.0; // average
const float AMP_PRECIP_PER_MONTH = 4.0;  // plus or minus
const float RANDOM_PRECIP = 2.0;         // plus or minus noise

const float AVG_TEMP = 60.0;    // average
const float AMP_TEMP = 30.0;    // plus or minus
const float RANDOM_TEMP = 12.0; // plus or minus noise

const float MIDTEMP = 60.0;
const float MIDPRECIP = 14.0;

unsigned int seed = 0;
//float x = Ranf(&seed, -1.f, 1.f);

float Ranf(unsigned int *seedp, float low, float high)
{
    float r = (float)rand_r(seedp); // 0 - RAND_MAX

    return (low + r * (high - low) / (float)RAND_MAX);
}

float Sqr(float x)
{
    return x * x;
}

void Rabbits()
{
    while (NowYear <= 2028)
    {
        int nextNumRabbits = NowNumRabbits;
        int carryingCapacity = (int)(NowHeight);

        if (nextNumRabbits <= carryingCapacity)
            nextNumRabbits += 2;
        else
        {
            nextNumRabbits--;
            if (nextNumRabbits < 2)
                nextNumRabbits++;
        }

        #pragma omp barrier // Done Computing Barrier

        NowNumRabbits = nextNumRabbits;

        #pragma omp barrier // Done Assigning Barrier

        #pragma omp barrier // Done Printing Barrier
    }
}

void RyeGrass()
{
    while (NowYear <= 2028)
    {
        float nextHeight = NowHeight;

        float tempFactor = exp(-Sqr((NowTemp - MIDTEMP) / 10.));
        float precipFactor = exp(-Sqr((NowPrecip - MIDPRECIP) / 10.));

        nextHeight += tempFactor * precipFactor * RYEGRASS_GROWS_PER_MONTH;
        nextHeight -= (float)NowNumRabbits * ONE_RABBITS_EATS_PER_MONTH;

        if (nextHeight < 0.)
            nextHeight = 0.;

        nextHeight += NowFertilizer / 20.;

        #pragma omp barrier // Done Computing Barrier

        NowHeight = nextHeight;

        #pragma omp barrier // Done Assigning Barrier

        #pragma omp barrier // Done Printing Barrier
    }
}

void Fertilizer()
{
    while (NowYear <= 2028)
    {
        int numRabbits = NowNumRabbits;
        float fertilizerCreated;

        fertilizerCreated = (float)numRabbits * ONE_RABBIT_POOPS_PER_MONTH;
        
        #pragma omp barrier // Done Computing Barrier

        NowFertilizer = fertilizerCreated;

        #pragma omp barrier // Done Assigning Barrier

        #pragma omp barrier // Done Printing Barrier
    }
}

void Watcher()
{
    printf("Year, Month, Temperature, Precipitation, Rabbits, Fertilizer, Grass Height \n");

    while (NowYear <= 2028)
    {
        #pragma omp barrier // Done Computing Barrier

        #pragma omp barrier // Done Assigning Barrier

        fprintf(stderr, "%d, %d, %f, %f, %d, %f, %f\n", NowYear, NowMonth, (5./9.) * (NowTemp - 32), NowPrecip * 2.54, NowNumRabbits, NowFertilizer * 0.45, NowHeight * 2.54);

        NowMonth++;
        if (NowMonth == 12)
        {
            NowYear++;
            NowMonth = 0;
        }

        // Values for next cycle

        float ang = (30. * (float)NowMonth + 15.) * (M_PI / 180.);

        float temp = AVG_TEMP - AMP_TEMP * cos(ang);
        NowTemp = temp + Ranf(&seed, -RANDOM_TEMP, RANDOM_TEMP);

        float precip = AVG_PRECIP_PER_MONTH + AMP_PRECIP_PER_MONTH * sin(ang);
        NowPrecip = precip + Ranf(&seed, -RANDOM_PRECIP, RANDOM_PRECIP);
        if (NowPrecip < 0.)
            NowPrecip = 0.;

        #pragma omp barrier // Done Printing Barrier
    }
}

int main(int argc, char *argv[])
{
    // This stuff is also repeated every month
    float ang = (30. * (float)NowMonth + 15.) * (M_PI / 180.);

    float temp = AVG_TEMP - AMP_TEMP * cos(ang);
    NowTemp = temp + Ranf(&seed, -RANDOM_TEMP, RANDOM_TEMP);

    float precip = AVG_PRECIP_PER_MONTH + AMP_PRECIP_PER_MONTH * sin(ang);
    NowPrecip = precip + Ranf(&seed, -RANDOM_PRECIP, RANDOM_PRECIP);
    if (NowPrecip < 0.)
        NowPrecip = 0.;

    // starting date and time:
    NowMonth = 0;
    NowYear = 2023;

    // starting state (feel free to change this if you want):
    NowNumRabbits = 4;
    NowHeight = 5.;

    NowFertilizer = (float)NowNumRabbits * ONE_RABBIT_POOPS_PER_MONTH;

    omp_set_num_threads(4); // same as # of sections
    #pragma omp parallel sections
    {
        #pragma omp section
        {
            Rabbits();
        }

        #pragma omp section
        {
            RyeGrass();
        }

        #pragma omp section
        {
            Watcher();
        }

        #pragma omp section
        {
        	Fertilizer();
        }
    } // implied barrier -- all functions must return in order
      // to allow any of them to get past here

    return 0;
}
